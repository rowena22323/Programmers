
문제 설명
문자열로 구성된 리스트 strings와, 정수 n이 주어졌을 때, 각 문자열의 인덱스 n번째 글자를 기준으로 오름차순 정렬하려 합니다. 예를 들어 strings가 [sun, bed, car]이고 n이 1이면 각 단어의 인덱스 1의 문자 u, e, a로 strings를 정렬합니다.

제한 조건
strings는 길이 1 이상, 50이하인 배열입니다.
strings의 원소는 소문자 알파벳으로 이루어져 있습니다.
strings의 원소는 길이 1 이상, 100이하인 문자열입니다.
모든 strings의 원소의 길이는 n보다 큽니다.
인덱스 1의 문자가 같은 문자열이 여럿 일 경우, 사전순으로 앞선 문자열이 앞쪽에 위치합니다.
입출력 예
strings	n	return
[sun, bed, car]	1	[car, bed, sun]
[abce, abcd, cdx]	2	[abcd, abce, cdx]
입출력 예 설명
입출력 예 1
sun, bed, car의 1번째 인덱스 값은 각각 u, e, a 입니다. 이를 기준으로 strings를 정렬하면 [car, bed, sun] 입니다.

입출력 예 2
abce와 abcd, cdx의 2번째 인덱스 값은 c, c, x입니다. 따라서 정렬 후에는 cdx가 가장 뒤에 위치합니다. abce와 abcd는 사전순으로 정렬하면 abcd가 우선하므로, 답은 [abcd, abce, cdx] 입니다.

solution.py
wer
1
def solution(strings, n):
2
    answer = []
3
    for i in range(len(strings)):
4
        strings[i] = strings[i][n]+strings[i]
5
    strings.sort()
6
    print(strings)
7
    
8
    for j in range(len(strings)):
9
        answer.append(strings[j][1:])
10
    return answer
실행 결과
테스트 1
입력값 〉	["sun", "bed", "car"], 1
기댓값 〉	["car", "bed", "sun"]
실행 결과 〉	테스트를 통과하였습니다.
출력 〉	['acar', 'ebed', 'usun']
테스트 2
입력값 〉	["abce", "abcd", "cdx"], 2
기댓값 〉	["abcd", "abce", "cdx"]
실행 결과 〉	테스트를 통과하였습니다.
출력 〉	['cabcd', 'cabce', 'xcdx']
테스트 결과 (~˘▾˘)~
2개 중 2개 성공
샘플 테스트 케이스를 통과했다는 의미로, 작성한 코드가 문제의 정답은 아닐 수 있습니다.
(샘플 테스트 케이스는 [테스트 케이스 추가하기] 버튼을 통해 확인하실 수 있습니다.)
